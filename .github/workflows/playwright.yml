name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: lts/*

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Install Allure Commandline
      run: npm install -g allure-commandline --save-dev

    - name: Run Playwright tests
      run: npx playwright test
      continue-on-error: true  # Ensures the job doesn't stop if there are failures

    - name: Check allure-results directory
      run: ls -l allure-results  # Debugging step to verify allure-results directory

    - name: Generate Allure report
      run: allure generate ./allure-results --clean -o ./allure-report

    - name: Rename HTML report to report.html
      run: |
        BUILD_NUMBER=${{ github.run_id }}
        mkdir -p reports/${BUILD_NUMBER}

        # Rename Playwright HTML report to avoid conflicts
        mv playwright-report/index.html reports/${BUILD_NUMBER}/report.html

        # Move Allure report (keep it as index.html)
        mv allure-report/* reports/${BUILD_NUMBER}/

    - name: Commit and push reports to GitHub Pages
      run: |
        cd $GITHUB_WORKSPACE

        # Check if origin exists, if so, remove it
        git remote remove origin || true

        # Initialize git if it's not already initialized
        git init

        # Configure GitHub Actions identity
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Add the new report folder (build folder)
        git add reports/${{ github.run_id }}

        # Commit the changes (new report folder)
        git commit -m "Add Playwright and Allure test reports for build ${{ github.run_id }}" || echo "No changes to commit"

        # If there are changes, push to GitHub Pages
        if [[ $(git status --porcelain) ]]; then
          echo "Changes detected, pushing to GitHub Pages"
          
          # Add the remote for GitHub Pages
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          # Fetch and checkout the gh-pages branch (create if not exists)
          git fetch origin
          git checkout gh-pages || git checkout -b gh-pages

          # Push the changes to the gh-pages branch
          git push origin gh-pages --force
        else
          echo "No changes to push"
        fi

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
